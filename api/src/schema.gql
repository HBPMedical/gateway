# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface BaseParameter {
  name: String!
  label: String

  """Small hint (description) for the end user"""
  hint: String
  isRequired: Boolean
  hasMultiple: Boolean
  defaultValue: String
}

type User {
  id: String!
  username: String!
  fullname: String
  email: String
  agreeNDA: Boolean
}

type AuthenticationOutput {
  accessToken: String!
}

type Matomo {
  enabled: Boolean
  siteId: String
  urlBase: String
}

type Configuration {
  connectorId: String!
  hasGalaxy: Boolean @deprecated(reason: "Only used for legacy reason should be avoided")

  """Indicates if histograms can handle grouping"""
  hasGrouping: Boolean
  contactLink: String
  version: String!
  skipAuth: Boolean
  skipTos: Boolean
  enableSSO: Boolean
  matomo: Matomo
  ontologyUrl: String
}

type Dataset {
  id: String!
  label: String
  isLongitudinal: Boolean
}

type Group {
  id: String!
  label: String
  description: String
  groups: [String!]

  """List of variable's ids"""
  variables: [String!]

  """List of datasets avalaible, set null if all datasets allowed"""
  datasets: [String!]
}

type Category {
  value: String!
  label: String
}

type Variable {
  id: String!
  label: String
  type: String
  description: String
  enumerations: [Category!]
  groups: [Group!]

  """List of datasets avalaible, set null if all datasets allowed"""
  datasets: [String!]
}

type Domain {
  id: String!
  label: String
  description: String
  version: String
  groups: [Group!]!
  variables: [Variable!]!
  datasets: [Dataset!]!
  rootGroup: Group!
}

type OptionValue {
  value: String!
  label: String!
}

type NominalParameter implements BaseParameter {
  name: String!
  label: String

  """Small hint (description) for the end user"""
  hint: String
  isRequired: Boolean
  hasMultiple: Boolean
  defaultValue: String

  """Id of the parameter"""
  linkedTo: AllowedLink
  allowedValues: [OptionValue!]
}

"""The supported links."""
enum AllowedLink {
  VARIABLE
  COVARIABLE
}

type NumberParameter implements BaseParameter {
  name: String!
  label: String

  """Small hint (description) for the end user"""
  hint: String
  isRequired: Boolean
  hasMultiple: Boolean
  defaultValue: String
  min: Float
  max: Float
  isReal: Boolean
}

type StringParameter implements BaseParameter {
  name: String!
  label: String

  """Small hint (description) for the end user"""
  hint: String
  isRequired: Boolean
  hasMultiple: Boolean
  defaultValue: String
}

type VariableParameter {
  hint: String
  isRequired: Boolean
  hasMultiple: Boolean

  """If undefined, all types are allowed"""
  allowedTypes: [String!]
}

type Algorithm {
  id: String!
  parameters: [BaseParameter!]
  variable: VariableParameter!
  coVariable: VariableParameter
  hasFormula: Boolean
  type: String
  label: String
  description: String
}

type FilterConfiguration {
  """List of types that can considered as number"""
  numberTypes: [String!]
}

type FormulaOperation {
  """Type name of the variable"""
  variableType: String!

  """List of operation available for this type"""
  operationTypes: [String!]!
}

type GroupResult {
  name: String!
  description: String
  results: [ResultUnion!]!
}

union ResultUnion = TableResult | RawResult | GroupsResult | HeatMapResult | LineChartResult | BarChartResult | MeanChartResult

type TableResult {
  name: String!
  data: [[String!]!]!
  headers: [Header!]!
  tableStyle: TableStyle
}

enum TableStyle {
  DEFAULT
  NORMAL
}

type RawResult {
  rawdata: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type GroupsResult {
  groups: [GroupResult!]!
}

type HeatMapResult {
  name: String!
  xAxis: ChartAxis
  yAxis: ChartAxis
  matrix: [[Float!]!]!
  heatMapStyle: HeatMapStyle
}

"""Type of display."""
enum HeatMapStyle {
  NORMAL
  BUBBLE
}

type LineChartResult {
  name: String!
  xAxis: ChartAxis
  yAxis: ChartAxis
  lines: [LineResult!]!
  hasBisector: Boolean
}

type BarChartResult {
  name: String!
  xAxis: ChartAxis
  yAxis: ChartAxis

  """List of bar's value"""
  barValues: [Float!]!
  hasConnectedBars: Boolean
}

type MeanChartResult {
  name: String!
  xAxis: ChartAxis
  yAxis: ChartAxis

  """List of points with confidence information: min, mean, max"""
  pointCIs: [PointCI!]!
}

type ChartAxis {
  """label of the Axis"""
  label: String

  """label of each element on this Axis"""
  categories: [String!]
}

type ExtraLineInfo {
  label: String!
  values: [String!]!
}

type LineResult {
  label: String!
  x: [Float!]!
  y: [Float!]!
  extraLineInfos: [ExtraLineInfo!]
  type: LineType
}

enum LineType {
  NORMAL
  DASHED
}

type Header {
  name: String!
  type: String!
}

type PointCI {
  min: Float
  mean: Float!
  max: Float
}

type Author {
  username: String
  fullname: String
}

type Transformation {
  """Variable's id on which to apply the transformation"""
  id: String!

  """Transformation to apply"""
  operation: String!
}

type Formula {
  transformations: [Transformation!]
  interactions: [[String!]!]
}

type ParamValue {
  name: String!
  value: String!
}

type AlgorithmResult {
  name: String!
  parameters: [ParamValue!]
}

type Experiment {
  id: String!
  name: String!
  author: Author
  createdAt: String
  updateAt: String
  finishedAt: String
  viewed: Boolean
  status: ExperimentStatus
  shared: Boolean!
  results: [ResultUnion!]
  datasets: [String!]!
  filter: String
  domain: String!
  variables: [String!]!
  coVariables: [String!]
  filterVariables: [String!]
  formula: Formula
  algorithm: AlgorithmResult!
}

enum ExperimentStatus {
  INIT
  PENDING
  SUCCESS
  WARN
  ERROR
}

type PartialExperiment {
  id: String
  name: String
  author: Author
  createdAt: String
  updateAt: String
  finishedAt: String
  viewed: Boolean
  status: ExperimentStatus
  shared: Boolean
  results: [ResultUnion!]
  datasets: [String!]
  filter: String
  domain: String
  variables: [String!]
  coVariables: [String!]
  filterVariables: [String!]
  formula: Formula
  algorithm: AlgorithmResult
}

type ListExperiments {
  currentPage: Float
  totalPages: Float
  totalExperiments: Float
  experiments: [Experiment!]
}

type Query {
  configuration: Configuration!
  domains: [Domain!]!
  algorithms: [Algorithm!]!
  formula: [FormulaOperation!]!
  filter: FilterConfiguration!
  user: User!
  experimentList(page: Float = 0, name: String = ""): ListExperiments!
  experiment(id: String!): Experiment!
}

type Mutation {
  login(variables: AuthenticationInput!): AuthenticationOutput!
  logout: Boolean!
  updateUser(updateUserInput: UpdateUserInput!): User!
  createExperiment(data: ExperimentCreateInput!, isTransient: Boolean = false): Experiment!
  editExperiment(id: String!, data: ExperimentEditInput!): Experiment!
  removeExperiment(id: String!): PartialExperiment!
}

input AuthenticationInput {
  username: String!
  password: String!
}

input UpdateUserInput {
  agreeNDA: Boolean!
}

input ExperimentCreateInput {
  datasets: [String!]!
  filter: String
  domain: String!
  variables: [String!]!
  coVariables: [String!] = []
  algorithm: AlgorithmInput!
  name: String!
  transformations: [FormulaTransformation!]
  interactions: [[String!]!]
}

input AlgorithmInput {
  id: String!
  parameters: [AlgorithmParamInput!] = []
  type: String
}

input AlgorithmParamInput {
  id: String!
  value: String!
}

input FormulaTransformation {
  id: String!
  operation: String!
}

input ExperimentEditInput {
  name: String
  shared: Boolean
  viewed: Boolean
}
