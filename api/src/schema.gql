# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: String!
  label: String
}

type Group {
  id: String!
  label: String
  description: String
  groups: [String!]

  """List of variable's ids"""
  variables: [String!]
}

type Variable {
  id: String!
  label: String
  type: String
  description: String
  enumerations: [Category!]
  groups: [Group!]
}

type Domain {
  id: String!
  label: String
  description: String
  groups: [Group!]!
  variables: [Variable!]!
  datasets: [Category!]!
  rootGroup: Group!
}

type AlgorithmParameter {
  id: String!
  value: [String!]
  label: String
  description: String
  defaultValue: String
  isMultiple: Boolean
  isRequired: Boolean
  min: String
  max: String
  type: String
}

type Algorithm {
  id: String!
  parameters: [AlgorithmParameter!]
  label: String
  type: String
  description: String
}

type GroupResult {
  name: String!
  description: String
  results: [ResultUnion!]!
}

union ResultUnion = TableResult | RawResult | GroupsResult | HeatMapResult | LineChartResult

type TableResult {
  name: String!
  data: [[String!]!]!
  headers: [Header!]!
}

type RawResult {
  rawdata: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type GroupsResult {
  groups: [GroupResult!]!
}

type HeatMapResult {
  name: String!
  xAxis: ChartAxis
  yAxis: ChartAxis
  matrix: [[Float!]!]!
}

type LineChartResult {
  name: String!
  xAxis: ChartAxis
  yAxis: ChartAxis
  lines: [LineResult!]!
}

type ChartAxis {
  label: String
  categories: [String!]
}

type ExtraLineInfo {
  label: String!
  values: [String!]!
}

type LineResult {
  label: String!
  x: [Float!]!
  y: [Float!]!
  extraLineInfos: [ExtraLineInfo!]
  type: LineType
}

enum LineType {
  NORMAL
  DASHED
}

type Header {
  name: String!
  type: String!
}

type Experiment {
  uuid: String
  author: String
  createdAt: Float
  updateAt: Float
  finishedAt: Float
  viewed: Boolean
  status: String
  shared: Boolean!
  results: [ResultUnion!]
  datasets: [String!]!
  filter: String
  domain: String!
  variables: [String!]!
  coVariables: [String!]
  algorithm: Algorithm!
  name: String!
}

type PartialExperiment {
  uuid: String
  author: String
  createdAt: Float
  updateAt: Float
  finishedAt: Float
  viewed: Boolean
  status: String
  shared: Boolean
  results: [ResultUnion!]
  datasets: [String!]
  filter: String
  domain: String
  variables: [String!]
  coVariables: [String!]
  algorithm: Algorithm
  name: String
}

type ListExperiments {
  currentPage: Float
  totalPages: Float
  totalExperiments: Float
  experiments: [Experiment!]!
}

type Query {
  domains(ids: [String!] = []): [Domain!]!
  experiments(name: String = "", page: Float = 0): ListExperiments!
  expriment(uuid: String!): Experiment!
  algorithms: [Algorithm!]!
}

type Mutation {
  createExperiment(isTransient: Boolean = false, data: ExperimentCreateInput!): Experiment!
  editExperiment(data: ExperimentEditInput!, uuid: String!): Experiment!
  removeExperiment(uuid: String!): PartialExperiment!
}

input ExperimentCreateInput {
  datasets: [String!]!
  filter: String
  domain: String!
  variables: [String!]!
  coVariables: [String!] = []
  algorithm: AlgorithmInput!
  name: String!
  transformations: [FormulaTransformation!]
  interactions: [[String!]!]
}

input AlgorithmInput {
  id: String!
  parameters: [AlgorithmParamInput!] = []
  type: String!
}

input AlgorithmParamInput {
  id: String!
  value: [String!]!
}

input FormulaTransformation {
  name: String!
  operation: String!
}

input ExperimentEditInput {
  name: String
  shared: Boolean
  viewed: Boolean
}
